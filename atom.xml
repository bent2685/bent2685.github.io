<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bent灵感</title>
  
  
  <link href="https://bent2685.github.io/atom.xml" rel="self"/>
  
  <link href="https://bent2685.github.io/"/>
  <updated>2025-05-08T04:26:56.234Z</updated>
  <id>https://bent2685.github.io/</id>
  
  <author>
    <name>Bent Hsu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>今天小雨</title>
    <link href="https://bent2685.github.io/2025/05/08/%E4%BB%8A%E5%A4%A9%E5%B0%8F%E9%9B%A8/"/>
    <id>https://bent2685.github.io/2025/05/08/%E4%BB%8A%E5%A4%A9%E5%B0%8F%E9%9B%A8/</id>
    <published>2025-05-07T16:00:00.000Z</published>
    <updated>2025-05-08T04:26:56.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天小雨"><a href="#今天小雨" class="headerlink" title="今天小雨"></a>今天小雨</h2><blockquote><p>有点癫了，写篇博客。</p></blockquote><p>就到这吧，没啥想说的</p><hr><h2 id="以上👋"><a href="#以上👋" class="headerlink" title="以上👋 ;"></a>以上👋 ;</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;今天小雨&quot;&gt;&lt;a href=&quot;#今天小雨&quot; class=&quot;headerlink&quot; title=&quot;今天小雨&quot;&gt;&lt;/a&gt;今天小雨&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有点癫了，写篇博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就到这吧，没啥想说的&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="生活" scheme="https://bent2685.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>事件总栈</title>
    <link href="https://bent2685.github.io/2025/04/20/%E4%BA%8B%E4%BB%B6%E6%80%BB%E6%A0%88/"/>
    <id>https://bent2685.github.io/2025/04/20/%E4%BA%8B%E4%BB%B6%E6%80%BB%E6%A0%88/</id>
    <published>2025-04-20T12:18:00.000Z</published>
    <updated>2025-04-22T09:29:21.356Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前端开发都会遇到一个老生常谈的场景，如下:<br>多组件、父子组件、孙子爷爷太爷爷组件如何进行互相的数据交互？</p></blockquote><hr><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li><strong>React</strong> Ahooks <a href="https://ahooks.js.org/hooks/use-event-emitter">useEventEmitter</a></li><li><strong>Vue3</strong> Vueuse <a href="useEventBus">useEventBus</a></li><li><a href="https://github.com/developit/mitt">mitt</a></li><li>等</li></ul><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>所谓<strong>事件总栈</strong>就是一个集中管理和发布订阅的函数，通俗的讲就是<a href="https://bent2685.github.io/2024/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/">发布订阅模式</a>，接下来介绍一个react中个人用的比较多的三方库。如果想了解什么是发布订阅模式可以看我的这篇文章</p><ul><li><a href="https://bent2685.github.io/2024/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/">设计模式|发布订阅模式</a></li></ul><h2 id="useEventEmitter"><a href="#useEventEmitter" class="headerlink" title="useEventEmitter"></a>useEventEmitter</h2><p>拿React下Ahooks库提供的<code>useEventEmitter</code>来说:</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>组件A(父)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">MainView</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ctx$ = <span class="title function_">useEventEmitter</span>() </span><br><span class="line">  ctx$.<span class="title function_">useSubscription</span>(<span class="function">(<span class="params">opt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, payload&#125; = opt</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;jump&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;payload.name&#125;</span> jump`</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;pay&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`pay <span class="subst">$&#123;payload.currency&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child1</span> <span class="attr">ctx</span>=<span class="string">&#123;ctx$&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child2</span> <span class="attr">ctx</span>=<span class="string">&#123;ctx$&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Child1</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">(<span class="params">&#123;ctx&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleBtnClick</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    ctx.<span class="title function_">emit</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;jump&#x27;</span>,</span><br><span class="line">      <span class="attr">payload</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Mike&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Press Me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上</p><p>当然，在子组件和孙子组件中也可以直接坚挺emit事件，只需要在写上<code>ctx.useSubscription</code>即可，例如</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Child2</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">(<span class="params">&#123;ctx&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleBtnClick</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    <span class="comment">// 发送订阅</span></span><br><span class="line">    ctx.<span class="title function_">emit</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;pay&#x27;</span>,</span><br><span class="line">      <span class="attr">payload</span>: &#123;</span><br><span class="line">        <span class="attr">currency</span>: <span class="number">20.22</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事件订阅</span></span><br><span class="line">  ctx$.<span class="title function_">useSubscription</span>(<span class="function">(<span class="params">opt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;type, payload&#125; = opt</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;jump&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;payload.name&#125;</span> jump`</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span>&gt;</span>Press Me<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过在使用的时候注意控制好订阅者，不要滥用，以免出现重复监听的问题。<strong>「到时追悔莫及，debug一百年」</strong>。</p><h1 id="👋"><a href="#👋" class="headerlink" title="👋 ;"></a>👋 ;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前端开发都会遇到一个老生常谈的场景，如下:&lt;br&gt;多组件、父子组件、孙子爷爷太爷爷组件如何进行互相的数据交互？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="前端" scheme="https://bent2685.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MapleMono|字体分享</title>
    <link href="https://bent2685.github.io/2025/03/30/MapleMono|%E5%AD%97%E4%BD%93%E5%88%86%E4%BA%AB/"/>
    <id>https://bent2685.github.io/2025/03/30/MapleMono|%E5%AD%97%E4%BD%93%E5%88%86%E4%BA%AB/</id>
    <published>2025-03-30T10:10:00.000Z</published>
    <updated>2025-05-08T04:26:33.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>带连字和控制台图标的圆角等宽字体，中英文宽度完美2:1，细粒度的自定义选项</p></blockquote><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><blockquote><p><a href="https://github.com/subframe7536/maple-font">字体Github仓库</a></p></blockquote><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一款支持连写和变体的Mono类型字体，中英文宽度完美2:1。个人比较喜欢[小写L]的变体，好处是可以清晰的编辑器和控制台中清晰的区分[l、L、I、1]，<strong>另外，花体字可以给荒诞的编码点缀点乐趣</strong></p><hr><h2 id="不多说了直接看图"><a href="#不多说了直接看图" class="headerlink" title="不多说了直接看图"></a>不多说了直接看图</h2><p><img src="/../images/MapleMono%7C%E5%AD%97%E4%BD%93%E5%88%86%E4%BA%AB.assets/code.png" alt="code"></p><hr><h2 id="以上👋"><a href="#以上👋" class="headerlink" title="以上👋 ;"></a>以上👋 ;</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;带连字和控制台图标的圆角等宽字体，中英文宽度完美2:1，细粒度的自定义选项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="工具推荐" scheme="https://bent2685.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>宝藏镜像源管理工具</title>
    <link href="https://bent2685.github.io/2024/10/23/%E5%AE%9D%E8%97%8F%E9%95%9C%E5%83%8F%E6%BA%90%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://bent2685.github.io/2024/10/23/%E5%AE%9D%E8%97%8F%E9%95%9C%E5%83%8F%E6%BA%90%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2024-10-22T16:00:00.000Z</published>
    <updated>2025-03-31T08:52:16.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平时开发时用到的许多环境、命令、工具都会涉及到镜像源的问题，因为网络环境的不同，每个网络所适合的镜像源也不同，甚至会直接ping不通…</p></blockquote><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>直达<a href="https://github.com/RubyMetric/chsrc"><strong>chsrc官方仓库</strong></a></p><hr><h2 id="chsrc介绍"><a href="#chsrc介绍" class="headerlink" title="chsrc介绍"></a>chsrc介绍</h2><blockquote><p>引用官方: 全平台通用换源工具与框架 <strong><a href="https://gitee.com/RubyMetric/chsrc">chsrc</a><strong>，</strong>目标支持 Linux, Windows (MSYS2, Cygwin), macOS, BSD 等尽可能多的操作系统环境，龙芯、飞腾、RISC-V 等尽可能多的 CPU</strong>。</p><p>我们使用 <strong>C99</strong> 来完成上述目标。我们并不使用 Python 或 JS 等解释语言，因为一个简单的换源工具，不应该强行塞给用户一个庞大的解释器和数十、数百 MB 其他文件。</p><p>chsrc官方仓库: <a href="https://github.com/RubyMetric/chsrc">https://github.com/RubyMetric/chsrc</a></p></blockquote><p>使用这个工具可以很方便的<strong>实现换镜像源的操作</strong>，它支持大多数软件、环境、编程语言、操作系统例如: pip、node(npm、yarn、pnpm)、java、go、rust、docker…</p><p>更多支持情况请使用<code>chsrc list</code>命令来查看。</p><hr><h2 id="chsrc安装"><a href="#chsrc安装" class="headerlink" title="chsrc安装"></a>chsrc安装</h2><p>这边只对<code>Mac</code>和<code>Linux</code>展开介绍</p><h3 id="Mac平台安装"><a href="#Mac平台安装" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h3><blockquote><p>前提安装了<a href="https://brew.sh/">Homebrew</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install chsrc</span><br></pre></td></tr></table></figure><p>– 完成</p><hr><h3 id="Linux平台安装"><a href="#Linux平台安装" class="headerlink" title="Linux平台安装"></a>Linux平台安装</h3><blockquote><p>在合适的目录下根据系统价格执行对应的<code>curl</code>命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x64</span></span><br><span class="line">curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-x64-linux -o chsrc; <span class="built_in">chmod</span> +x ./chsrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># aarch64</span></span><br><span class="line">curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-aarch64-linux -o chsrc; <span class="built_in">chmod</span> +x ./chsrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># riscv64</span></span><br><span class="line">curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-riscv64-linux -o chsrc; <span class="built_in">chmod</span> +x ./chsrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># armv7</span></span><br><span class="line">curl -L https://gitee.com/RubyMetric/chsrc/releases/download/pre/chsrc-armv7-linux -o chsrc; <span class="built_in">chmod</span> +x ./chsrc</span><br></pre></td></tr></table></figure><p>接着，需要给<code>./chsrc</code>设置环境变量或者别名</p><ul><li><p>打开<code>/etc/profile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>在末尾添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&#123;chsrc所在目录&#125;</span><br><span class="line"><span class="comment"># 例如: export PATH=$PATH:/home/user1/tools</span></span><br></pre></td></tr></table></figure></li><li><p>或者设置别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> chsrc=<span class="string">&#x27;/home/user1/tools/chsrc&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>最后保存后需要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li></ul><p>– 完成</p><hr><h2 id="chsrc使用"><a href="#chsrc使用" class="headerlink" title="chsrc使用"></a>chsrc使用</h2><p>chsrc的使用特别简单，具体请看官方仓库示例。这边举一个给docker换源的例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsrc <span class="built_in">set</span> docker</span><br></pre></td></tr></table></figure><p><img src="/../images/%E5%AE%9D%E8%97%8F%E9%95%9C%E5%83%8F%E6%BA%90%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.assets/image-20241023111133027.png" alt="image-20241023111133027"></p><p>可以看到chsrc会自动选择当前网络环境下最快的镜像源</p><hr><p>分享就到这里了，就这样吧。</p><h1 id="👌-回见"><a href="#👌-回见" class="headerlink" title="👌 回见;"></a>👌 回见;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;平时开发时用到的许多环境、命令、工具都会涉及到镜像源的问题，因为网络环境的不同，每个网络所适合的镜像源也不同，甚至会直接ping不通…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=</summary>
      
    
    
    
    
    <category term="工具推荐" scheme="https://bent2685.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>Vite + Axios跨域问题</title>
    <link href="https://bent2685.github.io/2024/06/11/Vite%20+%20Axios%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://bent2685.github.io/2024/06/11/Vite%20+%20Axios%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2024-06-11T09:16:00.000Z</published>
    <updated>2024-10-22T06:26:05.945Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>跨域问题指的是不同站点之间，使用 ajax 无法相互调用的问题。跨域问题本质是浏览器的一种保护机制，它的初衷是为了保证用户的安全，防止恶意网站窃取数据。但这个保护机制也带来了跨域问题。</p></blockquote><hr><h2 id="跨域的定义"><a href="#跨域的定义" class="headerlink" title="跨域的定义"></a>跨域的定义</h2><p>在请求时，如果出现了以下情况中的任意一种，那么它就是跨域请求：</p><ol><li><strong>协议不同, 如 http 和 https</strong></li><li><strong>域名不同</strong></li><li><strong>端口不同</strong></li></ol><hr><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><h3 id="后端解决-⭐️⭐️⭐️⭐️⭐️"><a href="#后端解决-⭐️⭐️⭐️⭐️⭐️" class="headerlink" title="后端解决(⭐️⭐️⭐️⭐️⭐️)"></a>后端解决(⭐️⭐️⭐️⭐️⭐️)</h3><p>什么？后端不愿意解决？那就接着往下看。</p><hr><h3 id="Nginx反代-⭐️⭐️⭐️⭐️⭐️"><a href="#Nginx反代-⭐️⭐️⭐️⭐️⭐️" class="headerlink" title="Nginx反代(⭐️⭐️⭐️⭐️⭐️)"></a>Nginx反代(⭐️⭐️⭐️⭐️⭐️)</h3><p>在上生产环境时，可以使用nginx来做反向代理，从而也可以解决跨域。这也是一种比较推荐的方式，但是今天在这就不讨论了。</p><hr><h3 id="前端解决"><a href="#前端解决" class="headerlink" title="前端解决"></a>前端解决</h3><p>如果后端死都不愿意解决，那就到了我们今天的主题<strong>Vite + Axios通过代理解决跨域问题</strong></p><blockquote><p>TIPS: 不过这种方式只能在开发环境使用，生产环境会失效</p></blockquote><p>在<code>vite.config.ts/js</code>里加入如下配置</p><p>它的作用就是通过配置代理表将请求的目标地址设为代理服务器的地址, 例如将请求的基础url设置为<code>/api</code>，当浏览器发送请求时会先将请求发送到代理服务器然后再由代理服务器转发给目标服务器，从而绕过同源策略的限制。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>: &#123;</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://接口主机地址:8080&#x27;</span>,</span><br><span class="line">      <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//this one is declare for cross</span></span><br><span class="line">      <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`网络请求: <span class="subst">$&#123;path.replace(<span class="string">&#x27;/api&#x27;</span>, <span class="string">&#x27;&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改axios的基本配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">serve</span>: <span class="title class_">AxiosInstance</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="文末"><a href="#文末" class="headerlink" title="文末;"></a>文末;</h2><p>没啥好总结的</p><hr><h1 id="👌-加纳"><a href="#👌-加纳" class="headerlink" title="👌 加纳~;"></a>👌 加纳~;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;跨域问题指的是不同站点之间，使用 ajax 无法相互调用的问题。跨域问题本质是浏览器的一种保护机制，它的初衷是为了保证用户的安全，防止恶意网站窃取数据。但这个保护机制也带来了跨域问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="前端" scheme="https://bent2685.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>刷新.gitignore更改</title>
    <link href="https://bent2685.github.io/2024/05/22/%E5%88%B7%E6%96%B0.gitignore%E6%9B%B4%E6%94%B9/"/>
    <id>https://bent2685.github.io/2024/05/22/%E5%88%B7%E6%96%B0.gitignore%E6%9B%B4%E6%94%B9/</id>
    <published>2024-05-22T01:24:00.000Z</published>
    <updated>2025-03-31T09:25:18.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前情提要:</strong></p><p>当我们更新了gitignore后，接下来想stash和commit的时候，发现声明的忽略文件还是会出现在的更改区中。</p></blockquote><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached . <span class="comment"># 删除本地缓存</span></span><br><span class="line">git add . <span class="comment"># 添加要提交的文件</span></span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span> <span class="comment"># 更新本地的缓存</span></span><br></pre></td></tr></table></figure><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>其实，只需要我们把缓存清理下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br></pre></td></tr></table></figure><p>再重新把所有更改文件添加到暂存区即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>最后再commit文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span> </span><br></pre></td></tr></table></figure><p>最后，如果有remote origin。那就执行<code>git pull &amp; git push</code>把更改和remote同步。</p><hr><h2 id="更多方式"><a href="#更多方式" class="headerlink" title="更多方式"></a>更多方式</h2><p><strong>「接下来是安利环节」</strong></p><p>在MacOS中，有一个git GUI叫<a href="https://git-fork.com/">fork</a>。fork是一款特别出色的git可视化工具，它在commit节点预览、合并、变基、和远端remote、代码的diif……这些领域都做的非常好。当然在右键将文件ignore时，他也会自动刷新更改区。</p><p>其他的git GUI我没使用过，无法再推荐更多了。实际上很多IDE也可以通过插件的方式去实现这个功能。</p><p><img src="https://git-fork.com/images/image1.jpg" alt="Fork"></p><hr><p><strong>「2025年3月30日追写」</strong></p><p>目前个人用的GUI是<a href="https://www.git-tower.com/mac">Tower</a>，现阶段觉得优于fork…(人是善变的)</p><p><img src="/../images/%E5%88%B7%E6%96%B0.gitignore%E6%9B%B4%E6%94%B9.assets/image-20250331172504795.png" alt="image-20250331172504795"></p><blockquote><p><strong>相关链接:</strong></p><ul><li><strong>Fork:</strong> <a href="https://git-fork.com/">https://git-fork.com/</a></li></ul></blockquote><hr><h1 id="👋"><a href="#👋" class="headerlink" title="👋 ;"></a>👋 ;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前情提要:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们更新了gitignore后，接下来想stash和commit的时候，发现声明的忽略文件还是会出现在的更改区中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>CSS BEM命名规范</title>
    <link href="https://bent2685.github.io/2024/05/21/CSS%20BEM%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>https://bent2685.github.io/2024/05/21/CSS%20BEM%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</id>
    <published>2024-05-21T09:16:00.000Z</published>
    <updated>2025-03-31T09:21:33.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>BEM（Block, Element, Modifier）是一种命名规范，用于创建可维护和可重用的 CSS 代码。它通过将 CSS 类名组织成独立的块、元素和修饰符，使代码更具结构性和一致性。</p></blockquote><h2 id="BEM-的基本概念"><a href="#BEM-的基本概念" class="headerlink" title="BEM 的基本概念"></a>BEM 的基本概念</h2><ol><li><strong>块（Block）</strong>：页面中独立存在的功能性块，块可以包含元素和修饰符。块的命名是唯一的，并且不依赖于页面的其他部分。</li><li><strong>元素（Element）</strong>：块的一部分，完成某项具体功能。元素的命名依赖于块，表示为块名后加双下划线和元素名。</li><li><strong>修饰符（Modifier）</strong>：用于定义块或元素的不同状态或外观。修饰符的命名依赖于块或元素，表示为块名或元素名后加双横线和修饰符名。</li></ol><hr><h2 id="BEM-命名规则"><a href="#BEM-命名规则" class="headerlink" title="BEM 命名规则"></a>BEM 命名规则</h2><ul><li>块（Block）：<code>.block</code></li><li>元素（Element）：<code>.block__element</code></li><li>修饰符（Modifier）：<code>.block--modifier</code> 或 <code>.block__element--modifier</code></li></ul><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下是一个使用 BEM 命名规范的示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button button--primary&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;button__text&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>button</code> 是一个块，表示按钮。</li><li><code>button__text</code> 是块 <code>button</code> 的一个元素，表示按钮的文本。</li><li><code>button--primary</code> 是块 <code>button</code> 的一个修饰符，表示按钮的主要样式。</li></ul><hr><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h3 id="块（Block）"><a href="#块（Block）" class="headerlink" title="块（Block）"></a>块（Block）</h3><p>块是页面中独立存在的功能性单元。块名应该简洁、描述性强，通常是一个名词。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="元素（Element）"><a href="#元素（Element）" class="headerlink" title="元素（Element）"></a>元素（Element）</h3><p>元素是块的一部分，用于完成某项具体功能。元素名应该紧跟块名，用双下划线 <code>__</code> 分隔，通常是名词或形容词。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu__item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu__link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="修饰符（Modifier）"><a href="#修饰符（Modifier）" class="headerlink" title="修饰符（Modifier）"></a>修饰符（Modifier）</h3><p>修饰符用于定义块或元素的不同状态或外观。修饰符名应该紧跟块名或元素名，用双横线 <code>--</code> 分隔，通常是形容词或描述状态的词语。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button button--large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button button--disabled&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu__item menu__item--active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="BEM-的优点"><a href="#BEM-的优点" class="headerlink" title="BEM 的优点"></a>BEM 的优点</h2><ol><li><strong>可读性</strong>：通过明确的命名规则，使 CSS 类名更具描述性和一致性，便于理解和维护。</li><li><strong>可重用性</strong>：通过将块、元素和修饰符分离，使组件更易于重用。</li><li><strong>可维护性</strong>：通过将样式拆分成独立的块、元素和修饰符，减少了样式冲突和依赖，使代码更易于维护和扩展。</li></ol><p>另外，再是使用<code>Sass/scss</code>、<code>Less</code>等预编译CSS库的时候。BEM能让代码逻辑清晰的同时能够更加有层次化，例如:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  &amp;__icon &#123;&#125;</span><br><span class="line">  &amp;__text &#123;&#125;</span><br><span class="line">  &amp;<span class="attr">--active</span> &#123;&#125;</span><br><span class="line">  &amp;<span class="selector-class">.disabled</span> &#123;&#125;</span><br><span class="line">  &amp;<span class="attr">--primary</span> &#123;&#125;</span><br><span class="line">  &amp;<span class="attr">--warning</span> &#123;&#125;</span><br><span class="line">  &amp;<span class="attr">--info</span> &#123;&#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:not</span>(&amp;--disabled) &#123;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;&#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:active</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加载</span></span><br><span class="line">  &amp;__spin &#123;</span><br><span class="line">    &amp;<span class="attr">--loading</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>BEM 命名规范是一种有效的 CSS 命名方法，通过将样式组织成独立的块、元素和修饰符，使代码更加结构化和可维护。无论是小型项目还是大型项目，BEM 都能帮助开发者编写更清晰、更易于维护的 CSS 代码。</p><hr><h1 id="👋"><a href="#👋" class="headerlink" title="👋 ;"></a>👋 ;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;BEM（Block, Element, Modifier）是一种命名规范，用于创建可维护和可重用的 CSS 代码。它通过将 CSS 类名组织成独立的块、元素和修饰符，使代码更具结构性和一致性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;B</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>设计模式|发布订阅模式</title>
    <link href="https://bent2685.github.io/2024/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://bent2685.github.io/2024/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-05-16T12:00:00.000Z</published>
    <updated>2025-03-31T08:51:57.367Z</updated>
    
    <content type="html"><![CDATA[<p><strong>「奇怪？发布订阅模式并没在23种设计模式内？」</strong></p><blockquote><p>事实上发布订阅模式是观察者模式的一种变种，又或是说，发布订阅模式就是观察者模式。当然江湖上这个话题一直争论不休。要说区别，实际上就是发布订阅模式多了一个注册中心而已。</p></blockquote><hr><h2 id="✍🏻定义"><a href="#✍🏻定义" class="headerlink" title="✍🏻定义"></a>✍🏻定义</h2><p>所谓定义就是最枯燥，最无聊的东西。诣在把一个东西说的高大上，今天比较懒，太多字了不想写。所以就略过吧，大家可以自己意淫或者等文末看看我有没有心情总结。</p><p><strong>「好吧，让GPT写吧」</strong></p><blockquote><p><strong>🙋‍♂️Q: 发布订阅模式是什么，能讲一下定义吗？</strong></p><blockquote><p><strong>🤖GPT:</strong></p><p>发布订阅模式（Publish-Subscribe Pattern）是一种消息传递模式，允许发送方（发布者）和接收方（订阅者）之间进行松耦合通信。通过这种模式，发布者不需要知道订阅者的存在，反之亦然。</p><p>发布订阅模式通过一个中介（通常称为事件总线或消息代理）来管理消息的发布和订阅。以下是该模式的核心要素：</p><ol><li><strong>发布者（Publisher）</strong>：发布者将消息发送到中介，而不直接发送给订阅者。发布者只需要知道消息的类型，而不需要知道谁会接收这些消息。</li><li><strong>订阅者（Subscriber）</strong>：订阅者向中介注册自己感兴趣的消息类型。当相应的消息发布时，中介会通知所有订阅了该消息类型的订阅者。</li><li><strong>中介（Mediator&#x2F;Message Broker）</strong>：中介负责管理消息的发布和订阅。它接收来自发布者的消息，并将这些消息传递给所有订阅了该消息的订阅者。</li></ol></blockquote></blockquote><hr><h2 id="⚽️场景"><a href="#⚽️场景" class="headerlink" title="⚽️场景"></a>⚽️场景</h2><p>发布订阅模式和观察者模式在实际场景中应用的很广泛。在常用的框架内也有很多体现。例如Vue中的<code>watch</code>、<code>computed</code>; 我们常用的各种消息总线，例如: <code>bus总线</code>;Electron的IpcRenderer和IpcMain间的通信模式; 各种状态管理工具……太多了。</p><hr><h2 id="⭐️表现形式"><a href="#⭐️表现形式" class="headerlink" title="⭐️表现形式"></a>⭐️表现形式</h2><p>在这篇文章中，我想使用<code>Javascript</code>来展示，首先发布订阅模式是一种松耦合的设计模式。通常有两个角色：</p><ul><li><strong>发布者(Publisher):</strong> 负责发布事件或消息。</li><li><strong>订阅者(Subscriber):</strong> 负责订阅事件或消息，并在事件发生时执行相应的操作。</li></ul><p>发布者和订阅者可以是<code>一对一</code>也可以是<code>一对多</code>关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅事件</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">event, listener</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[event] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">push</span>(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布事件</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">event, ...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[event].<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">listener</span>(...args);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消订阅事件</span></span><br><span class="line">    <span class="title function_">off</span>(<span class="params">event, listener</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[event] = <span class="variable language_">this</span>.<span class="property">events</span>[event]</span><br><span class="line">            .<span class="title function_">filter</span>(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个事件管理器实例</span></span><br><span class="line"><span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">eventEmitter.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message:&#x27;</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">eventEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// Received message: Hello, world!</span></span><br></pre></td></tr></table></figure><p>这就是最基本的发布订阅模式结构。再来个实际的例子吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span> = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addListener</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">push</span>(listener)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广播</span></span><br><span class="line">    <span class="title function_">broadcast</span>(<span class="params">event, msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!listener.<span class="property">events</span>[event]) <span class="keyword">return</span></span><br><span class="line">            listener.<span class="property">events</span>[event](msg)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">on</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[event]) <span class="variable language_">this</span>.<span class="property">events</span>[event] = callback</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个孩子和父母的例子，父母就是孩子的订阅者。孩子就是发布者。现在我们让孩子和他的发布者发生关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;子涵&#x27;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">dad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;子涵爸爸&#x27;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">mom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;子涵妈妈&#x27;</span>);</span><br><span class="line">child.addListener(dad);</span><br><span class="line">child.addListener(mom);</span><br></pre></td></tr></table></figure><p>这对父母的孩子很聪明，叫做子涵。一天孩子哭了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听孩子哭了的事件</span></span><br><span class="line">mom.<span class="title function_">on</span>(<span class="string">&#x27;cry&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;别哭了宝贝，妈妈这就来了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">dad.<span class="title function_">on</span>(<span class="string">&#x27;cry&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;别哭了傻种，爸爸来打你了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">broadcast</span>(<span class="string">&#x27;cry&#x27;</span>, <span class="string">&#x27;我好饿&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output: </span></span><br><span class="line"><span class="comment">// 别哭了宝贝，妈妈这就来了</span></span><br><span class="line"><span class="comment">// 别哭了傻种，爸爸来打你了</span></span><br></pre></td></tr></table></figure><p>于是，在得到父母的关爱后，子涵立马不哭了。这就是一个发布订阅模式的例子。<strong>孩子作为事件的发布者，维护了事件中心。父母作为事件的订阅者，监听孩子发布&#x2F;广播的数据。当然，广播的粒度也可以自定义。</strong></p><hr><p>好了，今天的的博客就到这吧……等我下回心血来潮了再来继续写吧。</p><h1 id="🫵未完待续"><a href="#🫵未完待续" class="headerlink" title="🫵未完待续;"></a>🫵未完待续;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;「奇怪？发布订阅模式并没在23种设计模式内？」&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事实上发布订阅模式是观察者模式的一种变种，又或是说，发布订阅模式就是观察者模式。当然江湖上这个话题一直争论不休。要说区别，实际上就是发布订阅模式多了一个</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>惰性调用</title>
    <link href="https://bent2685.github.io/2024/04/13/%E6%83%B0%E6%80%A7%E8%B0%83%E7%94%A8/"/>
    <id>https://bent2685.github.io/2024/04/13/%E6%83%B0%E6%80%A7%E8%B0%83%E7%94%A8/</id>
    <published>2024-04-13T13:00:00.000Z</published>
    <updated>2024-10-18T01:38:13.365Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>业务场景中，有些地方非常适合函数的惰性调用。利用惰性调用来优雅的实现代码的解耦合，同时也能快速的完成业务，<strong>准备下班。</strong></p></blockquote><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>所谓<strong>惰性调用</strong>也可以说是<strong>分步函数</strong>或者<strong>分段函数</strong>，从字面意思可以看出就是将一个功能点分两个或多个步骤完成。举个简单的分段函数例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = a =&gt; <span class="function"><span class="params">b</span> =&gt;</span> a + b </span><br></pre></td></tr></table></figure><p>从这个例子能看出来，所谓分段函数就是我们通俗的讲的<strong>闭包</strong>，所谓闭包简单的讲就是函数内返回一个函数或者调用一个内部函数，在这个<strong>闭包作用域</strong>内会将变量的值锁住，即闭包内层函数可以获取到闭包外层函数的局部变量。<strong>这个理论是我根据自己的理解瞎讲的，自认为有点说法。</strong></p><h3 id="实践一下"><a href="#实践一下" class="headerlink" title="实践一下"></a>实践一下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = a =&gt; =&gt; a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="title function_">foo</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bar</span>(<span class="number">1</span>))  <span class="comment">// 3(因为1+1=3)</span></span><br></pre></td></tr></table></figure><p>可以看到，这个分段函数被分成了两步执行，执行第二步的时候也能获取到第一段传进来的值。这个就是简单的分段函数。</p><hr><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>扯了那么多没用，实践大于理论。来个demo看看。</p><p><img src="/../images/%E6%83%B0%E6%80%A7%E8%B0%83%E7%94%A8.assets/image-20240413211842629.png" alt="image-20240413211842629"></p><blockquote><p>比如上面这个例子，点击列表项的选择按钮，在弹出模态框中选择合适项填充到列表项中。像这样的例子在erp系统中是非常常见的，如何使用函数惰性调用的方式来优雅的完成业务？<strong>看接下来的操作：</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arrs&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; item.name || &#x27;unset&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cat&quot;</span>&gt;</span>&#123;&#123; item.category || &#x27;unset&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span>&#123;&#123; item.xxx || &#x27;unset&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- ...... --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showModal(item)&quot;</span>&gt;</span>choose<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;<span class="name">XXXSelectModal</span> <span class="attr">ref</span>=<span class="string">&quot;modalRef&quot;</span> @<span class="attr">onGet</span>=<span class="string">&quot;handleGet&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> arrs <span class="comment">/* 列表项 */</span> = <span class="title function_">ref</span>([......])</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> callback = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> modalRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">showModal</span> = item =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义第二段函数(仅定义，不执行)</span></span></span><br><span class="line"><span class="language-javascript">    callback = <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用选中的值覆盖列表项</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在此作用域中能够拿到item的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(item).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!target[key]) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        item[key] = target[key]</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 打开模态框</span></span></span><br><span class="line"><span class="language-javascript">    modalRef.<span class="property">value</span>.<span class="title function_">show</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> handleGet <span class="comment">/* 拿到选中值 */</span> = <span class="function">(<span class="params">slectedValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 执行第二段函数，传递第二个参数</span></span></span><br><span class="line"><span class="language-javascript">    callback &amp;&amp; <span class="title function_">callback</span>(slectedValue)</span></span><br><span class="line"><span class="language-javascript">    callback = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到通过函数的分段执行，可以很轻松的实现业务的调用，这只是一个最简单的例子，在实际业务中往往会有更复杂更抽象的业务。掌握这个简单的操作可以省心很多。</p><hr><h2 id="🔺难度UP"><a href="#🔺难度UP" class="headerlink" title="🔺难度UP"></a>🔺难度UP</h2><p><strong>「作为一个喜欢装逼的bugger，多少得写点让人觉得很屌的东西来展示下自己。」</strong></p><p>函数分段执行也就是控制一个复杂函数的粒度，对于复杂函数的分段惰性操作，我们可以称之为<strong>函数柯理化</strong>。来点模拟业务处理的demo:</p><blockquote><p><strong>业务1：</strong>从这个数据中提取出所有name和age集合</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据</span></span><br><span class="line"><span class="keyword">const</span> data = [&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mike&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">33</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现定义好提取属性值的柯里化函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getField</span> = field =&gt; <span class="function"><span class="params">obj</span> =&gt;</span> obj[field]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameArr = data.<span class="title function_">map</span>(<span class="title function_">getField</span>(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> ageArr = data.<span class="title function_">map</span>(<span class="title function_">getField</span>(<span class="string">&#x27;age&#x27;</span>))</span><br></pre></td></tr></table></figure><p>当然你可以直接…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ageArr = data.<span class="title function_">map</span>(<span class="function"><span class="params">el</span> =&gt;</span> el.<span class="property">age</span>)</span><br><span class="line"><span class="keyword">const</span> nameArr = data.<span class="title function_">map</span>(<span class="function"><span class="params">el</span> =&gt;</span> el.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>业务2：</strong>根据不用场景需求来给对象数组按照字段排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据</span></span><br><span class="line"><span class="keyword">const</span> data = [&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Bent&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">balance</span>: <span class="number">2284</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">balance</span>: <span class="number">1232</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mike&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">33</span>,</span><br><span class="line">  <span class="attr">balance</span>: <span class="number">4523</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提前定义好柯里化函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">execSort</span> = (<span class="params">field, mode = <span class="string">&#x27;asc&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mode == <span class="string">&#x27;desc&#x27;</span>) <span class="keyword">return</span> b[field] - a[field]</span><br><span class="line">    <span class="keyword">if</span> (mode == <span class="string">&#x27;asc&#x27;</span>) <span class="keyword">return</span> a[field] - b[field]</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照年龄升序</span></span><br><span class="line">data.<span class="title function_">sort</span>(<span class="title function_">execSort</span>(<span class="string">&#x27;age&#x27;</span>))</span><br><span class="line"><span class="comment">// 按照年龄降序</span></span><br><span class="line">data.<span class="title function_">sort</span>(<span class="title function_">execSort</span>(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>))</span><br><span class="line"><span class="comment">// 按照.....</span></span><br></pre></td></tr></table></figure><p>当然你可以直接…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照年龄降序</span></span><br><span class="line">data.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">age</span> - a.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// 按照年龄升序</span></span><br><span class="line">data.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">age</span> - b.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// 按照余额降序</span></span><br><span class="line">data.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">balance</span> - a.<span class="property">balance</span>)</span><br><span class="line"><span class="comment">// 按照.....</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>业务3：</strong>在每次网络请求前开启加载效果，请求结束后关闭加载效果。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/utils/loading.js</span></span><br><span class="line"><span class="comment">// 提前定义好工具函数并且导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">withLoading</span> = (<span class="params">fn</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">showLoading</span>()</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title function_">fn</span>(...args)</span><br><span class="line">      <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">then</span>(<span class="function"><span class="params">resFix</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">hideLoading</span>()</span><br><span class="line">          <span class="keyword">return</span> resFix</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">hideLoading</span>()</span><br><span class="line">          <span class="keyword">throw</span> e</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="title function_">hideLoading</span>()</span><br><span class="line">      <span class="keyword">throw</span> e</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在业务中引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withLoading &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/loading&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 伴随加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDataWithLoading</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">withLoading</span>($axios.<span class="property">blog</span>.<span class="property">getBlogById</span>)(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不伴随加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> $axios.<span class="property">blog</span>.<span class="title function_">getBlogById</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我可以自由的控制一个异步函数是否要伴随加载效果</span></span><br><span class="line"><span class="title function_">getData</span>()</span><br><span class="line"><span class="title function_">getDataWithLoading</span>()</span><br></pre></td></tr></table></figure><p>这时候你就会发现，用常规的方式没办法做到这么优雅的解耦，传统的方式你通常会这样实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getDataWithLoading</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">showLoading</span>()</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> $axios.<span class="property">blog</span>.<span class="title function_">getBlogById</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">hideLoading</span>()</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">hideLoading</span>()</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>()</span><br><span class="line"><span class="comment">// 糟糕～每次我想要加载效果都要写这么一坨！</span></span><br></pre></td></tr></table></figure><p>这是函数柯理化的作用就体现出来了，<code>withLoading</code>这个函数是一个纯函数，主要的作用就是给异步操作提供加载效果，它不会对作用域造成污染。还不赶紧用起来？</p><hr><h2 id="文末"><a href="#文末" class="headerlink" title="文末;"></a>文末;</h2><p>函数的惰性调用能够让你和其他函数进行很好的组合工作，但是最好做到每个函数的单一职责，避免对作用域造成污染或者减少作用域污染。本文主要提供<code>FP(函数式编程)</code>的思路，让您在遇到问题的同时有一些巧妙的解决办法……如果你对函数式编程比较感兴趣的话，可以看看我之前写的文章。「<a href="https://bent2685.github.io/2023/12/15/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/">文章:函数式编程</a>」在这篇文章里你会看到一些更有意思的东西。</p><hr><h1 id="👋"><a href="#👋" class="headerlink" title="👋 ;"></a>👋 ;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;业务场景中，有些地方非常适合函数的惰性调用。利用惰性调用来优雅的实现代码的解耦合，同时也能快速的完成业务，&lt;strong&gt;准备下班。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot;</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="前端" scheme="https://bent2685.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>局部打印实现</title>
    <link href="https://bent2685.github.io/2024/03/30/%E5%B1%80%E9%83%A8%E6%89%93%E5%8D%B0%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bent2685.github.io/2024/03/30/%E5%B1%80%E9%83%A8%E6%89%93%E5%8D%B0%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-03-30T11:17:00.000Z</published>
    <updated>2024-03-30T11:17:37.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>引言:</strong> 通常实现打印功能，我们会通过<code>window.print()</code>来实现，但是这个方法没办法做到局部打印，例如我想打印一个dom的内容。其实只需要做一些简单处理便可以实现打印了。 </p></blockquote><hr><h2 id="方案一-🤔"><a href="#方案一-🤔" class="headerlink" title="方案一(🤔)"></a>方案一(🤔)</h2><blockquote><p>将页面DOM临时替换成局部DOM</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Word<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;printPage()&quot;</span>&gt;</span>打印页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;print-area&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如上方的结构，我想打印<code>.print-area</code>的内容，我可以这么操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">printPage</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> printAreaDom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.print-area&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> originContent <span class="comment">/* 原始内容 */</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将页面DOM临时替换成局部DOM</span></span><br><span class="line marked">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = printAreaDom.<span class="property">innerHTML</span></span><br><span class="line">  <span class="comment">// 执行打印</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">print</span>()</span><br><span class="line">  <span class="comment">// 复原</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = originContent </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做虽然能够打印出想要的内容，但是在复杂的环境下，可能会导致dom中的监听事件丢失。</p><hr><h2 id="方案二-🤩"><a href="#方案二-🤩" class="headerlink" title="方案二(🤩)"></a>方案二(🤩)</h2><blockquote><p>使用CSS媒体查询<code>@print</code></p></blockquote><p>直接贴代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> print &#123;</span></span><br><span class="line marked"><span class="language-css">      <span class="selector-pseudo">:has</span>(<span class="selector-class">.print-area</span>)&gt; <span class="selector-pseudo">:not</span>(<span class="selector-class">.print-area</span>)<span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:has</span>(<span class="selector-class">.print-area</span>)) &#123;</span></span><br><span class="line marked"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line marked"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.print-area</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Word<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;printPage()&quot;</span>&gt;</span>打印页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;print-area&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。把自己当傻瓜，不懂就问，你会学的更多。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">printPage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">print</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>经过如上的媒体查询设置，<code>window.print()</code>就只会打印<code>.print-area</code>中的内容了，其他的内容就会被隐藏。它的作用是选择拥有类名为 <code>.print-area</code> 的祖先元素但不是 <code>.print-area</code> 类型的子孙元素。换句话说，它选择了所有不包含 <code>.print-area</code> 类的元素，并且这些元素的祖先元素中有包含 <code>.print-area</code> 类的元素。对于这些元素，将它们的 <code>display</code> 属性设置为 <code>none</code>，在打印时隐藏它们。*<strong>不过要注意的是</strong>，该方法只适用于支持<code>:has</code>选择器的运行环境下，好在目前的主流浏览器都支持这个特性，应用MDN里的一句话:</p><blockquote><p>Since December 2023, this feature works across the latest devices and browser versions. This feature might not work in older devices or browsers.</p><p>译: 自2023年12月起，此功能适用于最新设备和浏览器版本。此功能可能无法在较旧的设备或浏览器中工作。</p></blockquote><h3 id="兼容性明细"><a href="#兼容性明细" class="headerlink" title="兼容性明细"></a>兼容性明细</h3><p><img src="/../images/%E5%B1%80%E9%83%A8%E6%89%93%E5%8D%B0%E5%AE%9E%E7%8E%B0.assets/image-20240330190658198.png" alt="image-20240330190658198"></p><p><strong>「在没有IE的新时代里，放心使用」</strong></p><p>若是对兼容性有苛刻的要求的话，可以使用成熟的三方库实现打印。在Electron、Tauri、uniapp这种跨平台框架中，应该去尝试使用像<code>:has</code>选择器这样的新花样来帮助我们的屎山代码化繁为简。</p><hr><h2 id="🔗"><a href="#🔗" class="headerlink" title="🔗;"></a>🔗;</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has">MDN对:has()选择器的介绍</a></p></blockquote><hr><h1 id="👋"><a href="#👋" class="headerlink" title="👋;"></a>👋;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;引言:&lt;/strong&gt; 通常实现打印功能，我们会通过&lt;code&gt;window.print()&lt;/code&gt;来实现，但是这个方法没办法做到局部打印，例如我想打印一个dom的内容。其实只需要做一些简单处理便可以实现打印了。 &lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="前端" scheme="https://bent2685.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端随笔</title>
    <link href="https://bent2685.github.io/2024/03/28/%E5%89%8D%E7%AB%AF%E9%9A%8F%E7%AC%94/"/>
    <id>https://bent2685.github.io/2024/03/28/%E5%89%8D%E7%AB%AF%E9%9A%8F%E7%AC%94/</id>
    <published>2024-03-28T11:55:00.000Z</published>
    <updated>2024-10-23T02:26:17.270Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>2024-03-28 更新</strong></p></blockquote><p><strong>「记录一些可爱或可癌的代码」</strong></p><hr><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h4 id="两个对象间变量值的追加和覆盖"><a href="#两个对象间变量值的追加和覆盖" class="headerlink" title="两个对象间变量值的追加和覆盖"></a>两个对象间变量值的追加和覆盖</h4><ul><li>覆盖并追加</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> bar = &#123; <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -&gt; 1</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(bar).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  foo[key] = bar[key]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// or 2</span></span><br><span class="line"><span class="keyword">const</span> foo2 = &#123;...foo, ...bar&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">// &#123; a:1, b:3, c:4 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo2) <span class="comment">// &#123; a:1, b:3, c:4 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>仅覆盖</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> bar = &#123; <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(foo).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(key <span class="keyword">in</span> bar)) <span class="keyword">return</span></span><br><span class="line">  foo[key] = bar[key]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">// &#123; a:1, b:3 &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h4 id="滚动字幕"><a href="#滚动字幕" class="headerlink" title="滚动字幕"></a>滚动字幕</h4><p>给需要滚动的字幕设置<code>display: inline-block;</code>这样就可以通过<code>100%</code>相对量拿到文本的相对宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;scrolling-text&quot;</span>&gt;</span>滚动字幕~~滚动字~~滚动~~滚！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.scrolling-text</span> &#123;</span></span><br><span class="line"><span class="language-css">  + <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: scroll-h <span class="number">10s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> scroll-h &#123;</span></span><br><span class="line"><span class="language-css">  <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="built_in">calc</span>(-<span class="number">100%</span> + <span class="number">300px</span>));</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="👋"><a href="#👋" class="headerlink" title="👋;"></a>👋;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2024-03-28 更新&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;「记录一些可爱或可癌的代码」&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#J</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="前端" scheme="https://bent2685.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="随笔" scheme="https://bent2685.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>OrbStack|好用的Docker管理</title>
    <link href="https://bent2685.github.io/2024/03/27/OrbStack|%E5%A5%BD%E7%94%A8%E7%9A%84Docker%E7%AE%A1%E7%90%86/"/>
    <id>https://bent2685.github.io/2024/03/27/OrbStack|%E5%A5%BD%E7%94%A8%E7%9A%84Docker%E7%AE%A1%E7%90%86/</id>
    <published>2024-03-27T11:55:00.000Z</published>
    <updated>2024-10-23T03:14:13.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><blockquote><p>🎉 替代Docker Desktop成为你<strong>最称手的Docker GUI</strong></p></blockquote><p>官方链接：<a href="https://orbstack.dev/">OrbStack</a></p><p><strong>「现在开始容器启动快了，风扇也不转了」</strong></p><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>作为一个<strong>Docker GUI</strong>能够管理容器和镜像等基础功能自然没问题，它更Docker Desktop比有着快和轻量的优势，还提供了<strong>Kubernetes</strong>的支持。</p><p>除了Docker和k8s外，有趣的是OrbStack还给你提供了Linux虚拟机，几秒钟就可以创建出一个Linux CLI，<strong>对开发者来说爽了是肯定的。</strong>值得一提的是，Linux GUI也在未来计划中。</p><p><img src="/../images/OrbStack%7C%E5%A5%BD%E7%94%A8%E7%9A%84Docker%E7%AE%A1%E7%90%86.assets/image-20240327192926032.png" alt="image-20240327192926032"></p><hr><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li>Docker Overview</li><li>Docker Networking</li><li>Docker卷和挂载</li></ul><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><ul><li>K8s Overview</li></ul><h3 id="Linux虚拟机"><a href="#Linux虚拟机" class="headerlink" title="Linux虚拟机"></a>Linux虚拟机</h3><ul><li>Linux VM Overview</li><li>Linux CLI</li><li>文件共享</li><li>SSH</li></ul><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><ul><li><u><em><strong>⚡启动 FAST</strong></em></u></li></ul><hr><h1 id="👋"><a href="#👋" class="headerlink" title="👋 ;"></a>👋 ;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;🎉 替代Docker Desktop成为你&lt;strong&gt;最称手的Docker GUI&lt;</summary>
      
    
    
    
    
    <category term="应用分享" scheme="https://bent2685.github.io/tags/%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/"/>
    
    <category term="docker" scheme="https://bent2685.github.io/tags/docker/"/>
    
    <category term="工具推荐" scheme="https://bent2685.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
    <category term="mac系统" scheme="https://bent2685.github.io/tags/mac%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Gogs|版本管理</title>
    <link href="https://bent2685.github.io/2024/03/27/Gogs|%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://bent2685.github.io/2024/03/27/Gogs|%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</id>
    <published>2024-03-27T06:28:00.000Z</published>
    <updated>2025-03-31T09:21:23.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如同其<a href="https://gogs.io/">官网</a>所说一款极易搭建的自助 Git 服务。它能够执行搭建git版本控制，并且在任何 <a href="https://golang.org/">Go 语言</a> 支持的平台都可以运行 Gogs，包括 Windows、Mac、Linux 以及 ARM。一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。有些用户甚至还将 Gogs 运行在 NAS 设备上。</p></blockquote><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull gogs/gogs</span><br><span class="line">$ docker pull mysql</span><br><span class="line">$ docker network create storage</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name mysql \</span><br><span class="line"> --<span class="built_in">env</span> MYSQL_ROOT_PASSWORD=root123 \</span><br><span class="line"> --network=storage \</span><br><span class="line"> -p 3307:3306 \</span><br><span class="line"> --restart=always \</span><br><span class="line"> -v ~/Documents/docker/mysql/data:/var/lib/mysql \</span><br><span class="line"> mysql</span><br><span class="line"> </span><br><span class="line"> docker run -d \</span><br><span class="line"> --name gogs \</span><br><span class="line"> --network=storage \</span><br><span class="line"> -p 10022:22 \</span><br><span class="line"> -p 3000:3000 \</span><br><span class="line"> -v ~/Documents/docker/gogs:/data \</span><br><span class="line"> gogs/gogs</span><br></pre></td></tr></table></figure><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Gogs拥有git技术链中的绝大多数功能，例如分支、Pull Request、工单、WIKi、分子保护、成员权限、组织、标签、Star、Fork、Watching……</p><p>凭借Golang的性能优势，执行速度和资源开销这块有着明显得优势，轻量级的特点能够在绝大多数设备中跑起来。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Gogs有很多种安装方式，例如：二进制安装、包管理安装、包管理安装、源码安装、<strong>Docker安装</strong>。本文介绍如何使用docker安装，也是我最为喜欢的方式。</p><ol><li><p><strong>获取镜像:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取gogs镜像</span></span><br><span class="line">$ docker pull gogs/gogs</span><br><span class="line"><span class="comment"># 获取mysql镜像</span></span><br><span class="line">$ docker pull mysql</span><br></pre></td></tr></table></figure></li><li><p><strong>创建网络(Bridge类型):</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create storage</span><br></pre></td></tr></table></figure></li><li><p><strong>启动Mysql</strong></p><p>创建Mysql容器，指定root密码、网络、持久化目录、端口(也可以无需指定，看你是否有暴露到宿主机的需求)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name mysql \</span><br><span class="line"> --<span class="built_in">env</span> MYSQL_ROOT_PASSWORD=root123 \</span><br><span class="line"> --network=storage \</span><br><span class="line"> -p 3307:3306 \</span><br><span class="line"> --restart=always \</span><br><span class="line"> -v ~/Documents/docker/mysql/data:/var/lib/mysql \</span><br><span class="line"> mysql</span><br></pre></td></tr></table></figure></li><li><p><strong>启动gogs</strong></p><p>创建gogs容器，指定网络、和持久化目录，暴露3000和22端口到宿主机的3000和10022上(宿主端口自便)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name gogs \</span><br><span class="line"> --network=storage \</span><br><span class="line"> -p 10022:22 \</span><br><span class="line"> -p 3000:3000 \</span><br><span class="line"> -v ~/Documents/docker/gogs:/data \</span><br><span class="line"> gogs/gogs</span><br></pre></td></tr></table></figure></li><li><p><strong>配置gogs:</strong></p><p>  <img src="/../images/Gogs%7C%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.assets/image-20240327141426902.png" alt="image-20240327141426902"><br> 确保gogs和mysql同属于一个网络<code>stoage</code>下，使用<code>容器名称:端口号</code>的形式连接到mysql服务，在mysql中实现创建好数据库<code>gogs</code>设置utf8mb4_general_ci字符集。在配置页中输入创建好的数据库、用户名、密码，完成数据库的设置。</p><p> 在可选设置中的管理员账号设置中创建一个管理员账号</p><p> <img src="/../images/Gogs%7C%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86.assets/image-20240327141625267.png" alt="image-20240327141625267"></p><p> 剩下的配置自行发挥即可，完成配置后点击立即安装。至此便完成了gogs的搭建。</p></li></ol><hr><h1 id="👋"><a href="#👋" class="headerlink" title="👋 ;"></a>👋 ;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如同其&lt;a href=&quot;https://gogs.io/&quot;&gt;官网&lt;/a&gt;所说一款极易搭建的自助 Git 服务。它能够执行搭建git版本控制，并且在任何 &lt;a href=&quot;https://golang.org/&quot;&gt;Go 语言&lt;/a&gt; 支持的平台都可以</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="应用分享" scheme="https://bent2685.github.io/tags/%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/"/>
    
    <category term="docker" scheme="https://bent2685.github.io/tags/docker/"/>
    
    <category term="工具推荐" scheme="https://bent2685.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>FuncNext|1.1.4</title>
    <link href="https://bent2685.github.io/2023/12/15/FuncNext-1-1-4/"/>
    <id>https://bent2685.github.io/2023/12/15/FuncNext-1-1-4/</id>
    <published>2023-12-15T09:42:12.000Z</published>
    <updated>2024-10-23T02:28:15.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>FuncNext 1.1.4</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install func-next --save-dev</span><br></pre></td></tr></table></figure><hr><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>是一个 JavaScript 类。它提供了一些方法，可以对一个对象进行一系列的操作，包括：</p><ul><li>深拷贝对象</li><li>排除指定的属性</li><li>执行一系列函数</li><li>覆盖或追加对象的属性</li><li>选择指定的属</li><li>删除指定的属性</li><li>将日期转换为时间戳</li><li>将日期转换为任意格式</li><li>对对象的每个属性执行指定的函数</li><li>这个类的作用是提供一种方便的方式来操作对象，可以用于数据处理、数据转换等场景。使用这个类可以避免手动编写大量的代码来完成这些操作，提高开发效率。</li></ul><p>如果要使用这个类，可以通过 import 语句将它引入到你的代码中，然后创建一个 FuncNext 的实例，调用它提供的方法来对对象进行操作。</p><hr><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">FuncNext</span> <span class="keyword">from</span> <span class="string">&#x27;func-next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bornDate</span>: <span class="string">&#x27;2003-06-03&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">out</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象每个键设为指定值</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">null</span>).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: null, age: null, gender: null, bornDate: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保护(排除)指定键</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">exclude</span>(<span class="string">&#x27;name&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">null</span>).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: &#x27;Alice&#x27;, age: null, gender: null, bornDate: null &#125;;</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">exclude</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">null</span>).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: &#x27;Alice&#x27;, age: 20, gender: null, bornDate: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖或新增</span></span><br><span class="line"><span class="comment">//! 受保护的键不会被修改</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">coverOrAppend</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: &#x27;jack&#x27;, age: 20, gender: 1, bornDate: &#x27;2003-06-03&#x27;, address: &#x27;xxx&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取指定key组成新对象</span></span><br><span class="line"><span class="comment">//! 受保护的键也会被pick</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">pick</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: &#x27;Alice&#x27;, age: 20 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除指定键</span></span><br><span class="line"><span class="comment">//! 受保护的键不会被移除</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">takeOut</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; gender: 1, bornDate: &#x27;2003-06-03&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把与日期有关的值都转为时间戳</span></span><br><span class="line"><span class="comment">//! 受保护的键不会被转换</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">bornDate</span>: <span class="string">&#x27;2003-06-03&#x27;</span>,</span><br><span class="line">  <span class="attr">createTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">dateToTimestamp</span>().<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: &#x27;Alice&#x27;, age: 20, bornDate: 1054598400000, createTime: 1686479418509 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把与日期有关的所有值都转换为自定义格式</span></span><br><span class="line"><span class="comment">//! 受保护的键除外</span></span><br><span class="line"><span class="comment">//* 结合dayjs等库使用，将是最佳实践</span></span><br><span class="line"><span class="comment">// 注意dateToAnyFormat接收一个T =&gt; R函数, 别忘了Return</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">bornDate</span>: <span class="string">&#x27;2003-06-03&#x27;</span>,</span><br><span class="line">  <span class="attr">createTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">dateToAnyFormat</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">null</span>).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: &#x27;Alice&#x27;, age: 20, bornDate: null, createTime: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历获取每个值</span></span><br><span class="line"><span class="comment">//！ 受保护的键不会被遍历</span></span><br><span class="line"><span class="comment">// 常用于修改, 别忘了return</span></span><br><span class="line"><span class="comment">// 接收一个(value, key) =&gt; newValue</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj).<span class="title function_">map</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="string">&#x27;name&#x27;</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// newObj = &#123; name: &#x27;Alice&#x27;, age: null, gender: null, bornDate: null &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历获取每个值</span></span><br><span class="line"><span class="comment">//！受保护的键也会被遍历</span></span><br><span class="line"><span class="comment">// 用于消费，请勿用来修改值</span></span><br><span class="line"><span class="comment">// 接受一个Consumer函数, 即(value, key, isProtected:是否受保护) =&gt; void</span></span><br><span class="line"><span class="title class_">FuncNext</span>.<span class="title function_">of</span>(obj)</span><br><span class="line">    .<span class="title function_">exclude</span>(<span class="string">&#x27;gender&#x27;</span>)</span><br><span class="line">    .<span class="title function_">each</span>(<span class="function">(<span class="params">value, key, isProtected</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`值: <span class="subst">$&#123;value&#125;</span>, 键: <span class="subst">$&#123;key&#125;</span>, 是否受保护: <span class="subst">$&#123;isProtected&#125;</span>`</span>)</span><br><span class="line">    &#125;).<span class="title function_">out</span>()</span><br><span class="line"><span class="comment">// 值: Alice, 键: name, 是否受保护: false</span></span><br><span class="line"><span class="comment">// 值: 20, 键: age, 是否受保护: false</span></span><br><span class="line"><span class="comment">// 值: 1, 键: gender, 是否受保护: true</span></span><br><span class="line"><span class="comment">// 值: 2003-06-03, 键: bornDate, 是否受保护: false</span></span><br></pre></td></tr></table></figure><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong><code>of()</code>和<code>out()</code>是 FuncNext 类中的两个起始方法。</strong></p><p>of() 方法用于创建一个 FuncNext 实例，它接受一个对象作为参数，并返回一个 FuncNext 实例，可以通过这个实例来对对象进行一系列的操作。</p><p>out() 方法用于获取操作后的结果，它会返回一个新的对象，这个对象是经过 FuncNext 实例中的所有操作后得到的结果。需要注意的是，out() 方法并不会修改原始对象，而是返回一个新的对象。</p><p>在 FuncNext 的链式调用中，通常会在 of() 方法后面调用一系列的方法来对对象进行操作，最后再调用 out() 方法来获取操作后的结果。</p><hr><h2 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h2><p><a href="https://github.com/bent2685/func-next"><img src="https://img.shields.io/badge/github-FuncNext-%23036aa4" alt="badge"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;FuncNext 1.1.4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="开源" scheme="https://bent2685.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="开发库" scheme="https://bent2685.github.io/tags/%E5%BC%80%E5%8F%91%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式|策略模式</title>
    <link href="https://bent2685.github.io/2023/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://bent2685.github.io/2023/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-12-15T09:35:16.000Z</published>
    <updated>2024-05-16T08:53:04.415Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>**策略模式(Strategy Pattern)**是一种软件设计模式，属于行为型模式。它允许在运行时根据不同情况选择算法的行为。</p></blockquote><hr><h2 id="✍🏻定义"><a href="#✍🏻定义" class="headerlink" title="✍🏻定义"></a>✍🏻定义</h2><p>在策略模式中，将各种算法封装成不同的策略（Strategy），并使它们可以互相替换。每个策略都完成一个特定的任务，但是它们的接口是相同的，这样业务就可以在不知道具体实现的情况下使用不同的策略。</p><hr><h2 id="🍭优点"><a href="#🍭优点" class="headerlink" title="🍭优点"></a>🍭优点</h2><ol><li>提供了更好的代码重用性，可以通过增加新的策略类来扩展系统功能，而不需要修改原有代码。</li><li>提供了更好的扩展性，可以方便地增加新的策略，满足不同的需求。</li><li>可以避免使用大量的条件语句，提高了代码的可读性和可维护性。</li></ol><hr><h2 id="组成成员"><a href="#组成成员" class="headerlink" title="组成成员"></a>组成成员</h2><h3 id="策略接口-Strategy-Interface"><a href="#策略接口-Strategy-Interface" class="headerlink" title="策略接口(Strategy Interface)"></a>策略接口(Strategy Interface)</h3><p>策略接口定义了策略模式的公共接口。它通常包含一个或多个方法，用于执行特定的算法或操作。所有的具体策略类都必须实现这个接口，以确保它们具有相同的方法签名。</p><h3 id="具体策略类-Concrete-Strategies"><a href="#具体策略类-Concrete-Strategies" class="headerlink" title="具体策略类(Concrete Strategies)"></a>具体策略类(Concrete Strategies)</h3><p>具体策略类实现了策略接口，并封装了具体的算法或操作。每个具体策略类提供了不同的实现，用于完成特定的任务。客户端可以根据需求选择不同的具体策略类。</p><h3 id="上下文类-Context"><a href="#上下文类-Context" class="headerlink" title="上下文类(Context)"></a>上下文类(Context)</h3><p>上下文类是策略模式的核心组件，它持有一个策略对象的引用，并在需要执行特定算法或操作时调用策略对象的方法。上下文类通常包含一个设置策略的方法，用于在运行时动态地切换策略。</p><h3 id="客户端-Client"><a href="#客户端-Client" class="headerlink" title="客户端(Client)"></a>客户端(Client)</h3><p>客户端是使用策略模式的调用者。它通过实例化上下文类并设置具体策略对象来选择要使用的算法或操作。客户端根据自身的需求，在不同的情况下选择不同的策略，从而实现灵活的算法切换。</p><hr><h2 id="📖经典例子"><a href="#📖经典例子" class="headerlink" title="📖经典例子"></a>📖经典例子</h2><p>我们使用java来写一个贴切实际业务的策略模式的例子</p><h3 id="支付策略接口"><a href="#支付策略接口" class="headerlink" title="支付策略接口"></a>支付策略接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体策略类"><a href="#具体策略类" class="headerlink" title="具体策略类"></a>具体策略类</h3><h4 id="信用卡支付"><a href="#信用卡支付" class="headerlink" title="信用卡支付"></a>信用卡支付</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreditCardPaymentStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String cardNumber;</span><br><span class="line">  <span class="keyword">private</span> String expirationDate;</span><br><span class="line">  <span class="keyword">private</span> String cvv;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">CreditCardPaymentStrategy</span><span class="params">(String cardNumber, String expirationDate, String cvv)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cardNumber = cardNumber;</span><br><span class="line">    <span class="built_in">this</span>.expirationDate = expirationDate;</span><br><span class="line">    <span class="built_in">this</span>.cvv = cvv;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用信用卡进行支付的逻辑</span></span><br><span class="line">    System.out.println(<span class="string">&quot;支付 ￥&quot;</span> + amount + <span class="string">&quot; 通过信用卡号: &quot;</span> + cardNumber);</span><br><span class="line">    <span class="comment">// 其他支付操作...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayPaymentStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String userId;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">AlipayPaymentStrategy</span><span class="params">(String userId, String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用支付宝进行支付的逻辑</span></span><br><span class="line">    System.out.println(<span class="string">&quot;支付 ￥&quot;</span> + amount + <span class="string">&quot; 通过支付宝账户: &quot;</span> + userId);</span><br><span class="line">    <span class="comment">// 其他支付操作...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上下文类"><a href="#上下文类" class="headerlink" title="上下文类"></a>上下文类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> amount;</span><br><span class="line">  <span class="keyword">private</span> PaymentStrategy paymentStrategy;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(<span class="type">double</span> amount, PaymentStrategy paymentStrategy)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    <span class="built_in">this</span>.paymentStrategy = paymentStrategy;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makePayment</span><span class="params">()</span> &#123;</span><br><span class="line">    paymentStrategy.pay(amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">100.0</span>, <span class="keyword">new</span> <span class="title class_">CreditCardPaymentStrategy</span>(<span class="string">&quot;1234 5678 9012 3456&quot;</span>, <span class="string">&quot;12/25&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">    <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">200.0</span>, <span class="keyword">new</span> <span class="title class_">AlipayPaymentStrategy</span>(<span class="string">&quot;user123&quot;</span>, <span class="string">&quot;password456&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行支付</span></span><br><span class="line">    order1.makePayment();</span><br><span class="line">    System.out.println();</span><br><span class="line">    order2.makePayment();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="string">支付</span> <span class="string">￥100.0</span> <span class="string">通过信用卡号:</span> <span class="number">1234 </span><span class="number">5678 </span><span class="number">9012 </span><span class="number">3456</span></span><br><span class="line"></span><br><span class="line"><span class="string">支付</span> <span class="string">￥200.0</span> <span class="string">通过支付宝账户:</span> <span class="string">user12</span></span><br></pre></td></tr></table></figure><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>结合上述例子，可以得出结论:</p><blockquote><p>策略接口定义了策略模式的公共接口，具体策略类实现了该接口并封装了具体的策略算法。上下文类持有策略对象并在需要时调用其方法，而客户端则负责创建具体策略对象并将其传递给上下文类。这样，客户端可以根据不同的情况选择不同的策略，并将其应用于上下文类的操作中。</p></blockquote><p>当业务需要更多执行策略的时候，只需创建具体策略类(继承策略公共接口)即可，例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 微信支付策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatPaymentStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String appId;</span><br><span class="line">  <span class="keyword">private</span> String appSecret;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WeChatPaymentStrategy</span><span class="params">(String appId, String appSecret)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.appId = appId;</span><br><span class="line">    <span class="built_in">this</span>.appSecret = appSecret;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用微信支付的逻辑</span></span><br><span class="line">    System.out.println(<span class="string">&quot;支付 ￥&quot;</span> + amount + <span class="string">&quot; 通过微信APP ID: &quot;</span> + appId);</span><br><span class="line">    <span class="comment">// 其他支付操作...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>且在具体执行逻辑中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">100.0</span>, <span class="keyword">new</span> <span class="title class_">CreditCardPaymentStrategy</span>(<span class="string">&quot;1234 5678 9012 3456&quot;</span>, <span class="string">&quot;12/25&quot;</span>, <span class="string">&quot;123&quot;</span>));</span><br><span class="line">    - <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">200.0</span>, <span class="keyword">new</span> <span class="title class_">AlipayPaymentStrategy</span>(<span class="string">&quot;user123&quot;</span>, <span class="string">&quot;password456&quot;</span>));</span><br><span class="line">    + <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(<span class="number">150.0</span>, <span class="keyword">new</span> <span class="title class_">WeChatPaymentStrategy</span>(<span class="string">&quot;12345678&quot;</span>, <span class="string">&quot;a1b2c3d4&quot;</span>));</span><br><span class="line">    <span class="comment">// 执行支付</span></span><br><span class="line">    order1.makePayment();</span><br><span class="line">    System.out.println();</span><br><span class="line">    order2.makePayment();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="string">支付</span> <span class="string">￥100.0</span> <span class="string">通过信用卡号:</span> <span class="number">1234 </span><span class="number">5678 </span><span class="number">9012 </span><span class="number">3456</span></span><br><span class="line"></span><br><span class="line"><span class="string">支付</span> <span class="string">￥150.0</span> <span class="string">通过微信AOO</span> <span class="attr">ID:</span> <span class="number">12345678</span></span><br></pre></td></tr></table></figure><p>在本例中，业务的替换或拓展通过策略模式的优化将逻辑业务转到了策略类中，降低了工程的耦合度和可维护性。</p><hr><h2 id="🍺枚举策略"><a href="#🍺枚举策略" class="headerlink" title="🍺枚举策略"></a>🍺枚举策略</h2><blockquote><p><strong>🙋🏻‍♂️问:</strong></p><p>策略模式的每次扩展都需要添加策略类，随着业务的不断扩展，显然这是一个弊端。能否解决这个问题呢？</p><blockquote><p><strong>💡当然可以！</strong></p><p>我们可以使用枚举策略</p></blockquote></blockquote><hr><h3 id="集合策略接口、具体策略类、上下文类"><a href="#集合策略接口、具体策略类、上下文类" class="headerlink" title="集合策略接口、具体策略类、上下文类"></a>集合策略接口、具体策略类、上下文类</h3><blockquote><p><strong>我们可以通过枚举的特性来优化</strong></p><p>枚举类中的抽象方法的实现，需要枚举类中的每个元素都对其进行实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">  CREDIT_CARD &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">      <span class="comment">// 使用信用卡进行支付的逻辑</span></span><br><span class="line">      System.out.println(<span class="string">&quot;支付 ￥&quot;</span> + amount + <span class="string">&quot; 通过信用卡&quot;</span>);</span><br><span class="line">      <span class="comment">// 其他支付操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ALIPAY &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">      <span class="comment">// 使用支付宝进行支付的逻辑</span></span><br><span class="line">      System.out.println(<span class="string">&quot;支付 ￥&quot;</span> + amount + <span class="string">&quot; 通过支付宝&quot;</span>);</span><br><span class="line">      <span class="comment">// 其他支付操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  WECHAT &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">      <span class="comment">// 使用微信支付的逻辑</span></span><br><span class="line">      System.out.println(<span class="string">&quot;支付 ￥&quot;</span> + amount + <span class="string">&quot; 通过微信&quot;</span>);</span><br><span class="line">      <span class="comment">// 其他支付操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时枚举类中的每个元素代表的即是一个策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用信用卡进行支付</span></span><br><span class="line">    PaymentStrategy.CREDIT_CARD.pay(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用支付宝进行支付</span></span><br><span class="line">    PaymentStrategy.ALIPAY.pay(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用微信支付</span></span><br><span class="line">    PaymentStrategy.WECHAT.pay(amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="string">支付</span> <span class="string">￥100.0</span> <span class="string">通过信用卡</span></span><br><span class="line"><span class="string">支付</span> <span class="string">￥100.0</span> <span class="string">通过支付宝</span></span><br><span class="line"><span class="string">支付</span> <span class="string">￥100.0</span> <span class="string">通过微信</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>🙋🏻‍♂️问:</strong></p><p>有没有办法可以通过业务传递的动态值来选择策略(而不是写死在程序上)?</p><blockquote><p><strong>💡当然可以！</strong></p><p>我们可以通过枚举的<code>valueOf</code>方法</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态选择枚举值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">paymentMethod</span> <span class="operator">=</span> <span class="string">&quot;WECHAT&quot;</span>;</span><br><span class="line">    <span class="type">PaymentStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> PaymentStrategy.valueOf(paymentMethod);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行支付</span></span><br><span class="line">    strategy.pay(amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="string">支付</span> <span class="string">￥100.0</span> <span class="string">通过微信</span></span><br></pre></td></tr></table></figure><hr><h2 id="✨使用函数式接口优化策略模式"><a href="#✨使用函数式接口优化策略模式" class="headerlink" title="✨使用函数式接口优化策略模式"></a>✨使用函数式接口优化策略模式</h2><blockquote><p>在Java8中引入了函数式编程概念以及Lambda表达式</p></blockquote><h3 id="定义函数式接口"><a href="#定义函数式接口" class="headerlink" title="定义函数式接口"></a>定义函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体业务实现"><a href="#具体业务实现" class="headerlink" title="具体业务实现"></a>具体业务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用Lambda表达式定义不同的支付策略</span></span><br><span class="line">    <span class="type">PaymentStrategy</span> <span class="variable">creditCardStrategy</span> <span class="operator">=</span> (amt) -&gt; &#123;</span><br><span class="line">      <span class="comment">// 支付操作...</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">PaymentStrategy</span> <span class="variable">alipayStrategy</span> <span class="operator">=</span> (amt) -&gt; &#123;</span><br><span class="line">      <span class="comment">// 支付操作...</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">PaymentStrategy</span> <span class="variable">wechatStrategy</span> <span class="operator">=</span> (amt) -&gt; &#123;</span><br><span class="line">      <span class="comment">// 支付操作...</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行支付</span></span><br><span class="line">    creditCardStrategy.pay(amount);</span><br><span class="line">    alipayStrategy.pay(amount);</span><br><span class="line">    wechatStrategy.pay(amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="💥注意"><a href="#💥注意" class="headerlink" title="💥注意"></a>💥注意</h2><p>如果业务<strong>只有一个或很少数的分支行为，又或者是无需持续维护或拓展分支功能的业务</strong>，那或许该考虑是否适合用策略模式。</p><blockquote><p>🙅🏻‍♂️<strong>请不要为了使用设计模式而尬写设计模式！</strong></p><p>🙅🏿‍♂️<strong>请不要为了使用设计模式而尬写设计模式！</strong></p><p>🙅‍♂️<strong>请不要为了使用设计模式而尬写设计模式！</strong></p><blockquote><p>🙎🏻: <strong>我测</strong></p></blockquote></blockquote><hr><h2 id="🎍扩展"><a href="#🎍扩展" class="headerlink" title="🎍扩展"></a>🎍扩展</h2><p>当然同一个业务下，不同策略类也会有重复的流程，可以结合<code>模板方法设计模式</code>来优化业务的耦合部分，提高可维护性。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>策略模式是一种行为设计模式，它允许在运行时根据不同的情况选择算法或行为。该模式将算法封装在独立的策略类中，并通过一个上下文类将客户端与具体的策略解耦。客户端可以动态地选择所需的策略，而无需了解其具体实现。</p><p><strong>策略模式可以优化代码中的分支语句。</strong>传统的条件语句（如if-else或switch）在算法逻辑较多或复杂时，容易导致代码臃肿、难以维护。而策略模式通过将不同的算法封装成独立的策略类，使得代码更加清晰、可读性更强，并且易于扩展。</p><p><strong>合理的使用策略模式可以提高业务代码的可维护性。</strong>使得代码更加清晰、可读性更强，并且易于扩展。</p></blockquote><p><strong>🛵ENDING</strong>…(开走了)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;**策略模式(Strategy Pattern)**是一种软件设计模式，属于行为型模式。它允许在运行时根据不同情况选择算法的行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;✍🏻定义&quot;&gt;&lt;a href=&quot;#✍🏻定义&quot; cla</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://bent2685.github.io/2023/12/15/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://bent2685.github.io/2023/12/15/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2023-12-15T09:18:47.000Z</published>
    <updated>2024-10-23T02:29:33.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>引言：</strong>函数式编程(Functional Programming)，简称 FP，是一种编程范式。</p><p>它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，lambda演算为该语言最重要的基础。而且，lambda演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p><p>比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。</p></blockquote><hr><h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><blockquote><p><strong>概念：</strong>即相同的输入，永远会得到相同的输出，而且没有任何可观察的<strong>副作用</strong>。</p></blockquote><p>所谓纯函数有两个重要概念：</p><ul><li><p><strong>无副作用</strong></p><p>纯函数在执行过程中不会对除函数返回值以外的任何东西产生影响。这意味着它不会改变任何全局变量、不会修改传入的参数，也不会产生除了返回值以外的其他可观察到的影响。</p></li><li><p><strong>相同输入产生相同输出</strong></p><p>给定相同的输入，纯函数总是返回相同的输出，不受任何外部因素影响。这使得纯函数更容易进行测试和推理，因为其行为是可预测和确定的。</p></li></ul><hr><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//* 非纯函数</span></span><br><span class="line"><span class="comment">// 污染外部变量</span></span><br><span class="line"><span class="keyword">const</span> baseNum = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> baseNum + num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//* 纯函数</span></span><br><span class="line"><span class="comment">// 没有污染外部变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> baseNum = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> baseNum + num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment">//* 非纯函数</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 改变原了数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//* 纯函数</span></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 返回新数组，不改变原数组</span></span><br></pre></td></tr></table></figure><hr><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li><strong>可预测性：</strong> 纯函数的输出只依赖于输入参数，因此对于相同的输入始终产生相同的输出。这种确定性使代码更易于测试和推理。</li><li><strong>可缓存性：</strong> 纯函数对于相同的输入始终返回相同的结果，因此可以利用缓存来提高性能，避免重复计算。</li><li><strong>可并行性：</strong> 由于纯函数不涉及共享状态，因此可以更容易地并行执行，无需担心竞争条件或锁的问题。</li><li><strong>更容易推理：</strong> 纯函数不依赖于外部状态，使得代码更容易推理和理解，减少了出错的可能性</li></ol><hr><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>闭包是一类特殊的高阶函数，它是由函数和其周围状态的引用捆绑在一起形成的，它的表现就是可以在一个作用域中<strong>调用一个函数内部的函数并访问到该函数的作用域中的成员</strong>。</p><p>闭包形成的原因是，当一个函数执行完成以后，其<strong>内部的成员就会被释放掉</strong>。如果这个<strong>函数返回了一个函数</strong>，并且在这个返回的函数<strong>内部又访问了其外部函数中的成员变量</strong>，这就形成了闭包。即<strong>外部对内部成员有引用，就造成该成员不能被释放掉</strong>。</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p><strong>在一个作用域中可以去调用另一个函数的内部函数</strong></p></li><li><p><strong>调用这个内部函数的时候可以访问到这个内部函数外部函数的内部成员</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算工资函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">calcSalary</span> = base =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params"><span class="comment">/* 表现工资 */</span> perf</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 内部函数可以访问到外部函数(calcSalary)的base变量</span></span><br><span class="line">        <span class="keyword">return</span> base + perf</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getSalaryOfDeveloper = <span class="title function_">calcSalary</span>(<span class="number">12000</span>)</span><br><span class="line"><span class="keyword">const</span> getSalaryOfManager = <span class="title function_">calcSalary</span>(<span class="number">15000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个作用域中调用函数的内部函数</span></span><br><span class="line"><span class="keyword">const</span> mikeSalary = <span class="title function_">getSalaryOfDeveloper</span>(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">// ==&gt; 14000 </span></span><br><span class="line"><span class="keyword">const</span> amySalary = <span class="title function_">getSalaryOfDeveloper</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="comment">// ==&gt; 15000</span></span><br><span class="line"><span class="keyword">const</span> jackSalary = <span class="title function_">getSalaryOfManager</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="comment">// =&gt;&gt; 18000</span></span><br></pre></td></tr></table></figure><hr><h2 id="惰性调用"><a href="#惰性调用" class="headerlink" title="惰性调用"></a>惰性调用</h2><blockquote><p><strong>概念：</strong>延迟表达式的求值直到实际需要的时候。这意味着表达式不会在定义时立即被计算，而是在需要其值的时候才被求值和执行。</p></blockquote><p>在函数式编程中，惰性计算经常用于创建无限序列或避免不必要的计算。这种方法允许程序在必要的时候才执行计算，以节省资源并提高效率。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算工资函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">calcSalary</span> = base =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">perf</span> =&gt;</span> base + perf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给予参数，但不立即执行</span></span><br><span class="line"><span class="keyword">const</span> getSalaryOfDeveloper = <span class="title function_">calcSalary</span>(<span class="number">12000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当需要结果时，才调用函数进行计算</span></span><br><span class="line"><span class="keyword">const</span> mikeSalary = <span class="title function_">getSalaryOfDeveloper</span>(<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 惰性调用在正则中的例子</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createRegExpTemplate</span> = (<span class="params">regStr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(regStr)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">testValue</span>) =&gt;</span> reg.<span class="title function_">test</span>(testValue)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> emailRegExp = <span class="title function_">createRegExpTemplate</span>(<span class="string">&#x27;^\\w+@[a-z0-9]+\\.[a-z]+$&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> phoneRegExp = <span class="title function_">createRegExpTemplate</span>(<span class="string">&#x27;^1[34578]\\d&#123;9&#125;$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">emailRegExp</span>(<span class="string">&#x27;111.com&#x27;</span>))</span><br><span class="line"><span class="comment">// ==&gt; false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">emailRegExp</span>(<span class="string">&#x27;helloword123@qq.com&#x27;</span>))</span><br><span class="line"><span class="comment">// ==&gt; true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">phoneRegExp</span>(<span class="string">&#x27;17312341234&#x27;</span>))</span><br><span class="line"><span class="comment">// ==&gt; true</span></span><br></pre></td></tr></table></figure><hr><h2 id="柯理化"><a href="#柯理化" class="headerlink" title="柯理化"></a>柯理化</h2><blockquote><p>柯里化是一种将使用<strong>多个参数的函数</strong>转换成<strong>一系列使用一个参数的函数</strong>的技术。它的核心思想是将一个接受多个参数的函数转换为一系列嵌套的单参数函数。</p></blockquote><h3 id="展现形式"><a href="#展现形式" class="headerlink" title="展现形式"></a>展现形式</h3><p>柯理化函数是建立在闭包和惰性调用的基础之上的一个概念，有了这两个理念的支持才得以实现函数柯理化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c</span><br><span class="line"><span class="comment">//* 柯理化函数</span></span><br><span class="line"><span class="comment">// 一些列一个参数的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = a =&gt; <span class="function"><span class="params">b</span> =&gt;</span> <span class="function"><span class="params">c</span> =&gt;</span> a + b + c</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>))</span><br><span class="line"><span class="comment">// =&gt; 6</span></span><br><span class="line"><span class="keyword">const</span> addBase = <span class="title function_">add</span>(<span class="number">100</span>)(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addBase</span>(<span class="number">5</span>))</span><br><span class="line"><span class="comment">// =&gt; 115</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addBase</span>(<span class="number">8</span>))</span><br><span class="line"><span class="comment">// =&gt; 118</span></span><br></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>多个参数的函数转换为一系列接受单个参数的函数。这种转换使得函数更加灵活、更易于复用，并且支持更为简洁的函数组合。</p></blockquote><h3 id="参数复用与部分应用"><a href="#参数复用与部分应用" class="headerlink" title="参数复用与部分应用"></a>参数复用与部分应用</h3><p>柯里化允许您先传递一部分参数，然后在后续调用中提供剩余参数。这对于创建更多抽象的函数非常有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculateTax</span>(<span class="params">taxRate</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> amount * taxRate</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个计算5%税率的函数</span></span><br><span class="line"><span class="keyword">const</span> apply5PercentTax = <span class="title function_">calculateTax</span>(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">apply5PercentTax</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title function_">apply5PercentTax</span>(<span class="number">200</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于闭包和惰性执行的特性，柯理化函数把一个业务流程颗粒化成一系列的小粒度业务。可以随着流程的变化惰性的赋予其他参数，让这个业务可以随着代码的执行流程变得非常可控，是函数式编程中非常重要的组成。</p><h3 id="柯理化工厂"><a href="#柯理化工厂" class="headerlink" title="柯理化工厂"></a>柯理化工厂</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">curryFactory</span> = (<span class="params">fn</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">curried</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fn</span>(...args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">...moreArgs</span>) =&gt;</span> <span class="title function_">curried</span>(...args, ...moreArgs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> curried</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们并不可能对多参数函数手动的实现它的柯理化，但是我们可以借助柯理化工厂来实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b, c</span>) =&gt; a + b + c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建柯里化版本</span></span><br><span class="line"><span class="keyword">const</span> curriedAdd = <span class="title function_">curryFactory</span>(add);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用柯里化函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)) <span class="comment">// 输出: 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)) <span class="comment">// 输出: 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// 输出: 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// 输出: 9</span></span><br></pre></td></tr></table></figure><hr><h2 id="组合-Compose"><a href="#组合-Compose" class="headerlink" title="组合(Compose)"></a>组合(Compose)</h2><blockquote><p>数组合是函数式编程中的一个重要概念，它涉及将多个函数结合在一起，形成一个新的函数。这种组合允许你以一种清晰、模块化的方式构建复杂的操作。</p></blockquote><h3 id="展现形式-1"><a href="#展现形式-1" class="headerlink" title="展现形式"></a>展现形式</h3><p>在函数组合中，两个或多个函数按照一定的顺序合并在一起，使得每个函数的输出成为下一个函数的输入，从而形成一个新的函数。这种组合可以简化代码、提高可读性，并且可以减少中间变量的使用。<strong>一个简单的例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的组合函数工厂</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个纯函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add5</span> = x =&gt; x + <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x</span>) =&gt; x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合函数并按顺序执行</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">compose</span>(add5, multiply)(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// =&gt; 25</span></span><br></pre></td></tr></table></figure><p>从这个简单的例子可以发现，函数组合其实就是字面意思，将多个函数组合在一起形成一个新的函数，当组合多的时候，纯函数的特点就体现出来的。这就是为什么函数式编程提倡纯函数，提倡无作用函数的重要原因。</p><h3 id="多函数组合"><a href="#多函数组合" class="headerlink" title="多函数组合"></a>多函数组合</h3><p>往往我们需要组合多个纯函数，那上面的简单组合工厂就不适用了，稍作调整：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">...fns</span>) =&gt; <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fns.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> <span class="title function_">fn</span>(acc), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add5</span> = x =&gt; x + <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = x =&gt; x * <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">desc10</span> = x =&gt; x - <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">compose</span>(add5, multiply, desc10)(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// =&gt; 5</span></span><br></pre></td></tr></table></figure><hr><h2 id="管道-Pipe"><a href="#管道-Pipe" class="headerlink" title="管道(Pipe)"></a>管道(Pipe)</h2><blockquote><p>管道(Pipe)，它很类似于组合。但更强调数据的流动和函数的串联，不会创建新的函数。</p></blockquote><h3 id="展现形式-2"><a href="#展现形式-2" class="headerlink" title="展现形式"></a>展现形式</h3><p>函数管道强调数据流向的方向，一个函数的输出成为下一个函数的输入，从而形成一个数据流水线。<strong>一个简单的例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add5</span> = (<span class="params">x</span>) =&gt; x + <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x</span>) =&gt; x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">multiply</span>(<span class="title function_">add5</span>(<span class="number">3</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// =&gt; 16</span></span><br></pre></td></tr></table></figure><p>可以看到它和组合的展现形式有所不同，它是从前往后，而非从而往前。和组合比调换了执行顺序，也就是说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x))</span><br><span class="line"><span class="comment">// 变为</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">f, g</span>) =&gt; <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">g</span>(<span class="title function_">f</span>(x))</span><br></pre></td></tr></table></figure><h3 id="管道和组合的区别"><a href="#管道和组合的区别" class="headerlink" title="管道和组合的区别"></a>管道和组合的区别</h3><p>在广义上，管道和组合其实是同一个作用，它们都是把多个函数组合在一起来执行一系列的操作。它们的实现方式可能有些微小的差别，主要在于函数执行顺序上，组合通常从右到左执行函数，而管道通常从左到右执行函数。很多时候甚至都不对它们不做区分，只不过从语义上对它们的职责进行了分化，从而导致叫法不同。例如，通常组合不会组合很多的函数，当组合的函数多了，我们可以称之为管道。</p><hr><h2 id="函子-Functor"><a href="#函子-Functor" class="headerlink" title="函子(Functor)"></a>函子(Functor)</h2><blockquote><p>在函数式编程中，函子（Functor）是一种特殊的对象或数据结构，它实现了 map 函数，并遵循一些特定规则。函子可被视为一种抽象，它提供了一种包装值的机制，并允许对这些值进行变换和操作，而无需直接暴露内部实现。</p></blockquote><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>函子的主要特点是它具有一个 <code>map</code> 方法，这个方法能够将函子中的值映射到另一个函子中。当对函子调用 <code>map</code> 方法时，它会返回一个新的函子，而不是直接操作原始值。</p><p>函子的实现可以是各种类型的数据结构，例如数组、对象、甚至 Promise。这种抽象允许我们对值进行变换、映射或其他操作，而无需直接访问或修改值。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li><strong>对值进行包装</strong></li><li><strong>提供<code>map</code>方法：</strong> 函子必须提供 <code>map</code> 方法，这个方法能够对函子内的值进行操作并返回一个新的函子。</li><li><strong>保持对原值的不可变性：</strong><code>map</code> 方法对值进行操作时，不会直接修改原始值，而是返回一个新的函子包含了新值。</li><li><strong>遵循同态性：</strong> <code>map</code> 方法保持了函子对值的变换，并且可以链接多次 <code>map</code> 调用而不改变函子的结构。</li></ul><h3 id="具体形式"><a href="#具体形式" class="headerlink" title="具体形式"></a>具体形式</h3><h4 id="Pointed函子"><a href="#Pointed函子" class="headerlink" title="Pointed函子"></a>Pointed函子</h4><p>实现了<code>of</code>静态方法的函子被称为<strong>Pointed函子</strong>，未实现的则为普通函子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pointed</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 私有</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 契约的map方法</span></span><br><span class="line">  <span class="title function_">map</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="comment">// fn: 传入的纯函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Pointed</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">_value</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pointed</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Pointed</span>.<span class="title function_">of</span>(<span class="number">10</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="Maybe函子"><a href="#Maybe函子" class="headerlink" title="Maybe函子"></a>Maybe函子</h4><blockquote><p>Maybe 会先检查自己的值是否为空，然后才调用传进来的函数，这样处理空值就不会出错了。Maybe 常用在那些可能无法成功返回结果的函数中；可以避免使用命令式的 if…else 语句，可以用 Maybe(null) 来表示失败，但却不能告诉我们太多有效信息，譬如：失败的原因是什么？是哪儿造成失败的？Either 函子能帮助我们解决这样的问题。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Maybe</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Maybe</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="comment">// 检查自己的值是否为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span> ? <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">_value</span>)) : <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> toUpper = <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="literal">null</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">toUpperCase</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Maybe &#123; _value: null &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toUpper)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用在可能会无法成功返回结果的函数中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFirst</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Maybe</span>.<span class="title function_">of</span>(arr[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> firstElement = <span class="title function_">getFirst</span>([]).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 输出：Maybe &#123; _value: null &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstElement)</span><br></pre></td></tr></table></figure><h4 id="Either函子"><a href="#Either函子" class="headerlink" title="Either函子"></a>Either函子</h4><blockquote><p>函数式编程里面，使用 Either 函子代替条件运算（if…else）；另一个用途是代替 try…catch，使用左值表示错误。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Left</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Left</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Right</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Right</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Right</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">_value</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面所述就是<strong>Either函子</strong>：Left表示错误函子，Right表示正确函子。<strong>Either函子</strong>通常用于函数的返回值例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = x =&gt; x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    ? <span class="title class_">Right</span>.<span class="title function_">of</span>(x)</span><br><span class="line">    : <span class="title class_">Left</span>.<span class="title function_">of</span>(<span class="string">&#x27;not even&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEven</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line"><span class="comment">// ==&gt; 输出：2</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">isEven</span>(<span class="number">3</span>).<span class="title function_">map</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line"><span class="comment">// ==&gt; 不输出</span></span><br></pre></td></tr></table></figure><p>如上例子，将函数的返回值改为Either函子，函数满足您的逻辑正确，则执行Right函子的map反之则执行Left函子的map语句(直接返回当前实力，也就是说被截断。)</p><p>那么，又如何判断函数返回的函子是Right还是Left呢？<strong>两种方法：</strong></p><ul><li><p><strong>标记函子</strong></p><p>这个方法简单粗暴，给对应Either函子一个标识即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Left</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">isLeft</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">  <span class="title function_">isRight</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Left</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Right</span> &#123;</span><br><span class="line">  <span class="title function_">isLeft</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">  <span class="title function_">isRight</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span> (value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Right</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">  map (fn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Right</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">_value</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = x =&gt; x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    ? <span class="title class_">Right</span>.<span class="title function_">of</span>(x)</span><br><span class="line">    : <span class="title class_">Left</span>.<span class="title function_">of</span>(<span class="string">&#x27;not even&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resFunctor = <span class="title function_">isEven</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (resFunctor.<span class="title function_">isRight</span>()) &#123;</span><br><span class="line">  resFunctor.<span class="title function_">map</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 执行错误逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种传统方式，不够灵活，可以试试使用<strong>fold方法</strong>来解决问题</p></li><li><p><strong>fold方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Left</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Left</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">map</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fold</span>(<span class="params">leftFn, rightFn</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">leftFn</span>(<span class="variable language_">this</span>.<span class="property">_value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Right</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Right</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">map</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Right</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">_value</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fold</span>(<span class="params">leftFn, rightFn</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">rightFn</span>(<span class="variable language_">this</span>.<span class="property">_value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = x =&gt; x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    ? <span class="title class_">Right</span>.<span class="title function_">of</span>(x)</span><br><span class="line">    : <span class="title class_">Left</span>.<span class="title function_">of</span>(<span class="string">`error: <span class="subst">$&#123;x&#125;</span> is not even`</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">isEven</span>(<span class="number">2</span>).<span class="title function_">fold</span>(</span><br><span class="line">    <span class="comment">// 直接输出错误信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span>,</span><br><span class="line">    <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;x&#125;</span> 为偶数，做一些额外处理`</span>)</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// =&gt; 2 为偶数，做一些额外处理</span></span><br><span class="line"><span class="comment">// =&gt; .....其他额外处理输出</span></span><br></pre></td></tr></table></figure><p>如果对错误事件想要进行额外的特殊处理，改怎么办？</p><p>无需变动上方代码，将特殊处理的逻辑传给<code>leftFn</code>即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">isEven</span>(<span class="number">3</span>).<span class="title function_">fold</span>(</span><br><span class="line">    <span class="comment">// 直接输出错误信息</span></span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;x&#125;</span> 不为偶数，做一些额外特殊处理`</span>)</span><br><span class="line">      <span class="comment">// ......</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;x&#125;</span> 为偶数，做一些额外处理`</span>)</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// =&gt; 3 不为偶数，做一些额外特殊处理</span></span><br><span class="line"><span class="comment">// =&gt; .....其他额外处理输出</span></span><br></pre></td></tr></table></figure><p>这样就可以很优雅的处理分支和异常</p></li></ul><h3 id="函子的使用"><a href="#函子的使用" class="headerlink" title="函子的使用"></a>函子的使用</h3><blockquote><p>通过函子实现链式编程，以及异常处理</p></blockquote><ul><li><p>所用函子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Either</span> = &#123;</span><br><span class="line">    <span class="title class_">Left</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">map</span>: <span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title class_">Either</span>.<span class="title class_">Left</span>(value),</span><br><span class="line">        <span class="attr">fold</span>: <span class="function">(<span class="params">fn, _</span>) =&gt;</span> <span class="title function_">fn</span>(value),</span><br><span class="line">        <span class="attr">chain</span>: <span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title class_">Either</span>.<span class="title class_">Left</span>(value)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Right</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">map</span>: <span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title class_">Either</span>.<span class="title class_">Right</span>(<span class="title function_">fn</span>(value)),</span><br><span class="line">        <span class="attr">fold</span>: <span class="function">(<span class="params">_, fn</span>) =&gt;</span> <span class="title function_">fn</span>(value),</span><br><span class="line">      <span class="comment">//+ 用于保持函子的结构</span></span><br><span class="line">        <span class="attr">chain</span>: <span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(value)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否为偶数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = (<span class="params">n</span>) =&gt; n % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    ? <span class="title class_">Either</span>.<span class="title class_">Right</span>(n)</span><br><span class="line">    : <span class="title class_">Either</span>.<span class="title class_">Left</span>(n)</span><br><span class="line"><span class="comment">// 是否大于2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isBiggerThan2</span> = (<span class="params">n</span>) =&gt; n &gt; <span class="number">2</span></span><br><span class="line">? <span class="title class_">Either</span>.<span class="title class_">Right</span>(n)</span><br><span class="line">    : <span class="title class_">Either</span>.<span class="title class_">Left</span>(n)</span><br><span class="line"><span class="comment">// 减半</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">half</span> = (<span class="params">n</span>) =&gt; n / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">isEven</span>(<span class="number">10</span>)</span><br><span class="line">    .<span class="title function_">chain</span>(isBiggerThan2)</span><br><span class="line">    .<span class="title function_">map</span>(half)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n + <span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">fold</span>(<span class="function">() =&gt;</span> <span class="number">0</span>, <span class="function"><span class="params">n</span> =&gt;</span> n)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">// =&gt; 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = <span class="title function_">isEven</span>(<span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">chain</span>(isBiggerThan2)</span><br><span class="line">    .<span class="title function_">map</span>(half)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n + <span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">fold</span>(<span class="function">() =&gt;</span> <span class="number">0</span>, <span class="function"><span class="params">n</span> =&gt;</span> n)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result3 = <span class="title function_">isEven</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">chain</span>(isBiggerThan2)</span><br><span class="line">    .<span class="title function_">map</span>(half)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n + <span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">fold</span>(<span class="function">() =&gt;</span> <span class="number">0</span>, <span class="function"><span class="params">n</span> =&gt;</span> n)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3)</span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br></pre></td></tr></table></figure><p>可以发现，当中途出现，<code>Either.Left</code>时，就会将<code>Either.Right.map()</code>更改为<code>Either.Left.map()</code>，也就是说不对值执行map中传递的纯函数返回函子本身(等价于跳过)，最终被<code>Either.Left.fold()</code>劫持到。</p></li></ul><blockquote><p>另外，类似这样的函子还有一些，例如：Ap函子、IO函子、Monad函子。通过上面所述的函子，可以得出，函子它具有一个 <code>map</code> 方法，这个方法能够将函子中的值映射到另一个函子中。当对函子调用 <code>map</code> 方法时，它会返回一个新的函子，而不是直接操作原始值。</p></blockquote><hr><h1 id="👋-保重"><a href="#👋-保重" class="headerlink" title="👋 保重;"></a>👋 保重;</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;引言：&lt;/strong&gt;函数式编程(Functional Programming)，简称 FP，是一种编程范式。&lt;/p&gt;
&lt;p&gt;它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，lambda演算为该语言最重要的基础。</summary>
      
    
    
    
    
    <category term="技术分享" scheme="https://bent2685.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
